import sys
import os
import queue
from PyQt6.QtWidgets import (
    QApplication,
    QMainWindow,
    QWidget,
    QVBoxLayout,
    QPushButton,
    QTextEdit,
    QScrollArea,
    QGroupBox,
    QMessageBox,
    QSplitter,
)
from PyQt6.QtCore import QTimer, Qt
from PyQt6.QtGui import QFont, QCloseEvent

# Import c√°c module t√πy ch·ªânh
sys.path.append(os.path.join(os.path.dirname(os.path.abspath(__file__))))
try:
    import config
    import functions
    import styles
    from ui_components import NotebookCard, SectionWidget
except ImportError as e:
    app = QApplication.instance()
    if not app:
        app = QApplication(sys.argv)
    QMessageBox.critical(None, "L·ªói Import", f"Kh√¥ng th·ªÉ import module c·∫ßn thi·∫øt: {e}")
    sys.exit(1)


class NotebookRunner(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle(config.APP_NAME)
        # Kh√¥ng set minimum size ·ªü ƒë√¢y, s·∫Ω t√≠nh d·ª±a tr√™n c√°c c·ªôt

        # --- C·∫•u tr√∫c d·ªØ li·ªáu ---
        self.available_notebook_cards = {}
        self.highlighted_available = set()  # --- Qu·∫£n l√Ω sections ---
        self.sections = {}  # Dict ch·ª©a c√°c SectionWidget
        self.section_counter = 0  # Counter ƒë·ªÉ t·∫°o ID unique cho section
        self.available_container = None  # S·∫Ω ƒë∆∞·ª£c g√°n trong setup_ui

        # --- Qu·∫£n l√Ω console visibility ---
        self.console_visible = False
        # --- L∆∞u tr·ªØ size g·ªëc c·ªßa notebook list ƒë·ªÉ lu√¥n kh√¥i ph·ª•c ƒë√∫ng ---
        self.original_notebook_list_width = config.NOTEBOOK_LIST_INITIAL_WIDTH

        self.set_window_icon()
        # --- Thi·∫øt l·∫≠p ƒë∆∞·ªùng d·∫´n v√† queue ---
        self.base_path, self.modules_path, self.notebooks_path = functions.setup_paths()

        self.output_queue = queue.Queue()
        self.running_threads = {}

        self.setup_ui()
        # Th·ª≠ enable l·∫°i stylesheet
        self.apply_stylesheet()  # --- Timer ƒë·ªÉ ki·ªÉm tra output queue ---
        self.queue_timer = QTimer(self)
        self.queue_timer.timeout.connect(self.check_output_queue)
        self.queue_timer.start(100)  # --- C·∫≠p nh·∫≠t k√≠ch th∆∞·ªõc c·ª≠a s·ªï ban ƒë·∫ßu ---
        self._update_window_size(initial=True)

    def set_window_icon(self):
        functions.setup_window_icon(self)

    def _calculate_minimum_window_size(self):
        """T√≠nh to√°n k√≠ch th∆∞·ªõc minimum window d·ª±a tr√™n c√°c c·ªôt ƒëang hi·ªÉn th·ªã"""
        min_width = 0
        min_height = config.WINDOW_MIN_HEIGHT

        # C·ªôt notebooks lu√¥n hi·ªÉn th·ªã
        notebook_width = config.NOTEBOOK_LIST_MIN_WIDTH
        # Th√™m padding n·∫øu c√≥ nhi·ªÅu notebooks (c√≥ th·ªÉ c√≥ scrollbar)
        if hasattr(self, "available_notebook_cards") and len(self.available_notebook_cards) > 5:
            notebook_width += config.NOTEBOOK_LIST_SCROLLBAR_PADDING
        min_width += notebook_width

        # C·ªôt console n·∫øu ƒëang hi·ªÉn th·ªã
        if hasattr(self, "console_visible") and self.console_visible:
            min_width += config.CONSOLE_MIN_WIDTH

        # C√°c c·ªôt sections
        if hasattr(self, "sections"):
            for section_widget in self.sections.values():
                section_width = config.SECTION_MIN_WIDTH
                # Th√™m padding n·∫øu section c√≥ nhi·ªÅu notebooks (c√≥ th·ªÉ c√≥ scrollbar)
                if hasattr(section_widget, "notebook_cards") and len(section_widget.notebook_cards) > 5:
                    section_width += config.SECTION_SCROLLBAR_PADDING
                min_width += section_width

        return min_width, min_height

    def _update_window_minimum_size(self):
        """C·∫≠p nh·∫≠t minimum size c·ªßa window"""
        min_width, min_height = self._calculate_minimum_window_size()
        print(f"DEBUG: Updating minimum size to {min_width}x{min_height}")
        self.setMinimumSize(min_width, min_height)
        print(f"DEBUG: Actual minimum size after setting: {self.minimumSize().width()}x{self.minimumSize().height()}")

    def _update_window_size(self, initial=False):
        """C·∫≠p nh·∫≠t k√≠ch th∆∞·ªõc c·ª≠a s·ªï ban ƒë·∫ßu"""
        if initial:
            # Thi·∫øt l·∫≠p k√≠ch th∆∞·ªõc ban ƒë·∫ßu: ch·ªâ c√≥ c·ªôt notebooks
            self.resize(config.WINDOW_INITIAL_WIDTH, config.WINDOW_INITIAL_HEIGHT)
            self._update_window_minimum_size()

    def setup_ui(self):
        """Thi·∫øt l·∫≠p giao di·ªán ƒë∆°n gi·∫£n v·ªõi log v√† danh s√°ch notebooks."""
        main_widget = QWidget()
        main_widget.setObjectName("MainWidget")
        self.setCentralWidget(main_widget)
        main_layout = QVBoxLayout(main_widget)
        main_layout.setContentsMargins(15, 15, 15, 15)

        # T·∫°o QSplitter ƒë·ªÉ c√≥ th·ªÉ k√©o th·∫£ resize c√°c c·ªôt
        self.main_splitter = QSplitter(Qt.Orientation.Horizontal)
        self.main_splitter.setObjectName("MainSplitter")
        self.main_splitter.setHandleWidth(8)

        # --- 1. C·ªôt Log (b√™n tr√°i) ---
        self.log_group = QGroupBox("üìä Console Log")
        self.log_group.setObjectName("LogGroup")
        log_layout = QVBoxLayout(self.log_group)
        log_layout.setSpacing(8)
        log_layout.setContentsMargins(12, 20, 12, 12)

        self.output_console = QTextEdit()
        self.output_console.setReadOnly(True)
        self.output_console.setFont(QFont("JetBrains Mono", 9))
        self.output_console.setObjectName("Console")

        clear_log_button = QPushButton("üóëÔ∏è X√≥a Console")
        clear_log_button.setObjectName("ClearButton")
        clear_log_button.clicked.connect(self.clear_console)

        log_layout.addWidget(self.output_console)
        log_layout.addWidget(clear_log_button)
        self.log_group.setMinimumWidth(config.CONSOLE_MIN_WIDTH)  # Console min width
        self.main_splitter.addWidget(self.log_group)

        # ·∫®n console m·∫∑c ƒë·ªãnh
        self.log_group.hide()
        self.console_visible = False

        # --- 2. C·ªôt Notebooks c√≥ s·∫µn & ƒêi·ªÅu khi·ªÉn ---
        self.available_container = QWidget()
        available_container_layout = QVBoxLayout(self.available_container)
        available_container_layout.setContentsMargins(0, 0, 0, 0)
        available_container_layout.setSpacing(10)

        available_group = QGroupBox("üìö Notebooks c√≥ s·∫µn")
        available_group.setObjectName("AvailableGroup")
        available_layout = QVBoxLayout(available_group)
        available_layout.setContentsMargins(12, 20, 12, 12)
        available_layout.setSpacing(8)

        self.available_scroll_area = QScrollArea()
        self.available_scroll_area.setWidgetResizable(True)
        self.available_scroll_area.setObjectName("AvailableScrollArea")
        # ƒê·∫∑t minimum width ƒë·ªÉ lu√¥n c√≥ ƒë·ªß ch·ªó cho scrollbar
        self.available_scroll_area.setMinimumWidth(config.NOTEBOOK_LIST_MIN_WIDTH)

        self.available_cards_widget = QWidget()
        self.available_cards_widget.setObjectName("CardsContainer")
        self.available_cards_layout = QVBoxLayout(self.available_cards_widget)
        self.available_cards_layout.setAlignment(Qt.AlignmentFlag.AlignTop)
        self.available_cards_layout.setSpacing(6)
        self.available_scroll_area.setWidget(self.available_cards_widget)
        available_layout.addWidget(self.available_scroll_area)

        # C√°c n√∫t ƒëi·ªÅu khi·ªÉn
        controls_group = QGroupBox("‚öôÔ∏è ƒêi·ªÅu khi·ªÉn")
        controls_group.setObjectName("ControlsGroup")
        controls_layout = QVBoxLayout(controls_group)
        controls_layout.setContentsMargins(12, 20, 12, 12)
        controls_layout.setSpacing(8)

        # N√∫t toggle console
        self.toggle_console_button = QPushButton("üìü Hi·ªán Console")
        self.toggle_console_button.setObjectName("ToggleConsoleButton")
        self.toggle_console_button.clicked.connect(self.toggle_console)

        refresh_button = QPushButton("üîÑ L√†m M·ªõi Danh S√°ch")
        refresh_button.setObjectName("RefreshButton")
        refresh_button.clicked.connect(self.refresh_notebook_list)  # N√∫t th√™m section m·ªõi
        add_section_button = QPushButton("‚ûï Th√™m Section M·ªõi")
        add_section_button.setObjectName("RefreshButton")
        add_section_button.clicked.connect(self.create_new_section)

        controls_layout.addWidget(self.toggle_console_button)
        controls_layout.addWidget(refresh_button)
        controls_layout.addWidget(add_section_button)

        available_container_layout.addWidget(available_group)
        available_container_layout.addWidget(controls_group)

        self.available_container.setMinimumWidth(config.NOTEBOOK_LIST_MIN_WIDTH)  # Notebook list min width
        self.main_splitter.addWidget(self.available_container)

        # Thi·∫øt l·∫≠p t·ª∑ l·ªá ban ƒë·∫ßu cho splitter (console ·∫©n, ch·ªâ c√≥ notebook list)
        self.main_splitter.setSizes(config.SPLITTER_INITIAL_SIZES)  # Console ·∫©n, available chi·∫øm initial width
        self.main_splitter.setStretchFactor(0, 1)  # Console c√≥ th·ªÉ stretch
        self.main_splitter.setStretchFactor(1, 1)  # Available c√≥ th·ªÉ stretch
        main_layout.addWidget(self.main_splitter)  # Kh·ªüi t·∫°o danh s√°ch notebook ngay l·∫≠p t·ª©c
        self.refresh_notebook_list()

        # C·∫≠p nh·∫≠t minimum size sau khi setup UI ho√†n t·∫•t
        self._update_window_minimum_size()

        # Force update UI
        self.update()
        QApplication.processEvents()

    def apply_stylesheet(self):
        """√Åp d·ª•ng stylesheet t·ª´ module styles"""
        self.setStyleSheet(styles.get_stylesheet())

    def _create_card_in_list(self, path, parent_layout, card_dict):
        description = functions.get_notebook_description(path)
        card = NotebookCard(path, description)
        card.clicked.connect(self._on_card_click)  # Connect signal
        parent_layout.addWidget(card)
        card_dict[path] = card

    def _on_card_click(self, path):
        functions.handle_card_click(path, self.available_notebook_cards, self.highlighted_available)

    def refresh_notebook_list(self):
        functions.refresh_notebook_list(
            self.notebooks_path,
            self.available_cards_layout,
            self.available_notebook_cards,
            self.highlighted_available,
            
            self._create_card_in_list,
        )

    def run_selected_notebooks(self):
        """Ch·∫°y c√°c notebooks ƒë√£ ƒë∆∞·ª£c ch·ªçn trong danh s√°ch c√≥ s·∫µn."""
        functions.run_selected_notebooks(self.highlighted_available, self.log_message, self.run_notebook)

    
    def run_notebook(self, notebook_path):
        functions.run_notebook(notebook_path, self.running_threads, self.output_queue)

    
    def stop_all_notebooks(self):
        functions.stop_all_notebooks(self.running_threads, self.log_message)

    def log_message(self, message):
        functions.log_message(message, self.output_queue)

    
    def check_output_queue(self):
        functions.check_output_queue(self.output_queue, self.output_console)

    def toggle_console(self):
        """·∫®n/hi·ªán console log v√† c·∫≠p nh·∫≠t minimum size c·ªßa window"""
        console_display_width = config.CONSOLE_DISPLAY_WIDTH  # ƒê·ªô r·ªông hi·ªÉn th·ªã c·ªßa console

        if self.console_visible:
            # ·∫®n console
            self.log_group.hide()
            self.toggle_console_button.setText("üìü Hi·ªán Console")
            self.console_visible = False  # L∆∞u k√≠ch th∆∞·ªõc hi·ªán t·∫°i c·ªßa c√°c c·ªôt (tr·ª´ console)
            current_sizes = self.main_splitter.sizes()
            if len(current_sizes) > 1:
                # ƒê·∫£m b·∫£o notebook list gi·ªØ k√≠ch th∆∞·ªõc g·ªëc, ƒë·∫∑t console = 0
                new_sizes = [0] + current_sizes[1:]
                # Notebook list b√¢y gi·ªù ·ªü v·ªã tr√≠ index 1
                if len(new_sizes) > 1:
                    new_sizes[1] = self.original_notebook_list_width
                    print(f"DEBUG: Toggle console OFF - Original notebook list width: {self.original_notebook_list_width}")
                    print(f"DEBUG: Toggle console OFF - New sizes: {new_sizes}")
                self.main_splitter.setSizes(new_sizes)

            # Gi·∫£m k√≠ch th∆∞·ªõc window
            current_width = self.width()
            new_width = current_width - console_display_width
            self.resize(new_width, self.height())

            # C·∫≠p nh·∫≠t minimum size
            self._update_window_minimum_size()

        else:
            # Hi·ªán console
            self.log_group.show()
            self.toggle_console_button.setText("üìü ·∫®n Console")
            self.console_visible = True  # L∆∞u k√≠ch th∆∞·ªõc hi·ªán t·∫°i c·ªßa notebook list v√† sections
            current_sizes = self.main_splitter.sizes()
            if len(current_sizes) > 0:
                # Ch√®n console v√†o ƒë·∫ßu, ƒë·∫£m b·∫£o notebook list gi·ªØ k√≠ch th∆∞·ªõc g·ªëc
                new_sizes = [console_display_width] + current_sizes[1:]
                # Notebook list b√¢y gi·ªù ·ªü v·ªã tr√≠ index 1
                if len(new_sizes) > 1:
                    new_sizes[1] = self.original_notebook_list_width
                    print(f"DEBUG: Toggle console ON - Original notebook list width: {self.original_notebook_list_width}")
                    print(f"DEBUG: Toggle console ON - New sizes: {new_sizes}")
                self.main_splitter.setSizes(new_sizes)

            # TƒÉng k√≠ch th∆∞·ªõc window ƒë·ªÉ ch·ª©a console
            current_width = self.width()
            new_width = current_width + console_display_width
            self.resize(new_width, self.height())

            # C·∫≠p nh·∫≠t minimum size
            self._update_window_minimum_size()

    def clear_console(self):
        self.output_console.clear()

    def closeEvent(self, a0: QCloseEvent | None) -> None:
        if functions.handle_close_event(self.running_threads):
            if a0:
                a0.accept()
        else:
            if a0:
                a0.ignore()

    # === METHODS ƒê·ªÇ QU·∫¢N L√ù SECTIONS ===

    def create_new_section(self):
        """T·∫°o m·ªôt section m·ªõi"""
        section_name = functions.create_section_dialog(self, f"Section {self.section_counter + 1}")

        if not section_name:
            return

        self.section_counter += 1
        section_id = f"section_{self.section_counter}"

        # T·∫°o SectionWidget
        section_widget = SectionWidget(section_name, section_id, self)  # K·∫øt n·ªëi signals
        section_widget.notebook_add_requested.connect(self.add_notebooks_to_section)
        section_widget.notebook_remove_requested.connect(self.remove_notebooks_from_section)
        section_widget.section_close_requested.connect(self.close_section)

        # L∆∞u k√≠ch th∆∞·ªõc hi·ªán t·∫°i c·ªßa t·∫•t c·∫£ c√°c c·ªôt TR∆Ø·ªöC khi th√™m
        current_sizes = self.main_splitter.sizes()
        print(f"DEBUG: T·∫°o section - Current sizes before: {current_sizes}")

        # Th√™m v√†o splitter
        self.main_splitter.addWidget(section_widget)
        self.sections[section_id] = section_widget  # S·ª≠ d·ª•ng QTimer ƒë·ªÉ ƒë·∫£m b·∫£o widget ƒë√£ ƒë∆∞·ª£c th√™m ho√†n to√†n tr∆∞·ªõc khi set sizes

        # TƒÉng k√≠ch th∆∞·ªõc window ƒë·ªÉ ch·ª©a section m·ªõi
        current_width = self.width()
        new_width = current_width + config.SECTION_DISPLAY_WIDTH
        self.resize(new_width, self.height())

        self.log_message(f"ƒê√£ t·∫°o section m·ªõi: {section_name}")

    def add_notebooks_to_section(self, section_widget):
        """Th√™m notebooks ƒë√£ ch·ªçn t·ª´ danh s√°ch t·ªïng v√†o section"""
        if not self.highlighted_available:
            functions.show_no_notebooks_selected_message(self, "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt notebook t·ª´ danh s√°ch c√≥ s·∫µn.")
            return

        paths_to_move = list(self.highlighted_available)
        moved_count = functions.move_notebooks_to_section(
            paths_to_move, self.available_notebook_cards, self.available_cards_layout, section_widget, self.highlighted_available
        )

        self.log_message(f"ƒê√£ di chuy·ªÉn {moved_count} notebooks v√†o {section_widget.section_name}")

    def remove_notebooks_from_section(self, section_widget, paths):
        """Tr·∫£ notebooks t·ª´ section v·ªÅ danh s√°ch t·ªïng"""
        moved_count = functions.move_notebooks_from_section(
            paths, section_widget, self.available_cards_layout, self.available_notebook_cards, self._create_card_in_list
        )

        self.log_message(f"ƒê√£ tr·∫£ {moved_count} notebooks t·ª´ {section_widget.section_name} v·ªÅ danh s√°ch t·ªïng")

    def close_section(self, section_widget):
        """ƒê√≥ng m·ªôt section"""
        section_id = section_widget.section_id
        
        # Tr·∫£ t·∫•t c·∫£ notebooks v·ªÅ danh s√°ch t·ªïng
        if section_widget.notebook_cards:
            paths_to_return = list(section_widget.notebook_cards.keys())
            self.remove_notebooks_from_section(section_widget, paths_to_return)
        
        # L∆∞u k√≠ch th∆∞·ªõc hi·ªán t·∫°i v√† t√¨m v·ªã tr√≠ c·ªßa section c·∫ßn x√≥a
        current_sizes = self.main_splitter.sizes()
        section_index = -1
        for i in range(self.main_splitter.count()):
            if self.main_splitter.widget(i) == section_widget:
                section_index = i
                break
        
        print(f"DEBUG: Close section - Current sizes: {current_sizes}")
        print(f"DEBUG: Close section - Section index: {section_index}")
        
        # L·∫•y k√≠ch th∆∞·ªõc section s·∫Ω b·ªã x√≥a ƒë·ªÉ ƒëi·ªÅu ch·ªânh window
        section_width = 0
        if section_index >= 0 and section_index < len(current_sizes):
            section_width = current_sizes[section_index]
          # X√≥a section kh·ªèi splitter tr∆∞·ªõc
        section_widget.cleanup()
        # QSplitter kh√¥ng c√≥ removeWidget, c·∫ßn d√πng setParent(None) ƒë·ªÉ x√≥a
        section_widget.setParent(None)
        section_widget.deleteLater()
        
        if section_id in self.sections:
            del self.sections[section_id]
        
        # S·ª≠ d·ª•ng QTimer ƒë·ªÉ ƒë·∫£m b·∫£o widget ƒë√£ b·ªã x√≥a ho√†n to√†n tr∆∞·ªõc khi restore sizes
        def restore_sizes():
            # T·∫°o danh s√°ch sizes m·ªõi v·ªõi notebook list width ƒë∆∞·ª£c fix c·ª©ng
            splitter_count = self.main_splitter.count()
            print(f"DEBUG: Close section (delayed) - Splitter count: {splitter_count}")
            
            if splitter_count > 0:
                new_sizes = []
                
                # X√°c ƒë·ªãnh v·ªã tr√≠ notebook list
                notebook_list_index = 1 if self.console_visible else 0
                
                # T·∫°o sizes m·ªõi
                for i in range(splitter_count):
                    if i == 0 and self.console_visible:
                        # Console column
                        new_sizes.append(config.CONSOLE_DISPLAY_WIDTH)
                    elif i == notebook_list_index:
                        # Notebook list column - lu√¥n fix c·ª©ng v·ªÅ k√≠ch th∆∞·ªõc g·ªëc
                        new_sizes.append(self.original_notebook_list_width)
                    else:
                        # Section columns - gi·ªØ k√≠ch th∆∞·ªõc hi·ªán t·∫°i
                        new_sizes.append(config.SECTION_DISPLAY_WIDTH)
                
                print(f"DEBUG: Close section (delayed) - Setting new sizes: {new_sizes}")
                print(f"DEBUG: Close section (delayed) - Original notebook list width: {self.original_notebook_list_width}")
                
                # Set sizes v√† force update
                self.main_splitter.setSizes(new_sizes)
                
                # Double-check v√† force l·∫°i n·∫øu c·∫ßn
                actual_sizes = self.main_splitter.sizes()
                print(f"DEBUG: Close section (delayed) - Actual sizes after first set: {actual_sizes}")
                
                if len(actual_sizes) > notebook_list_index and actual_sizes[notebook_list_index] != self.original_notebook_list_width:
                    print("DEBUG: Close section (delayed) - Notebook list width incorrect, forcing again...")
                    new_sizes[notebook_list_index] = self.original_notebook_list_width
                    self.main_splitter.setSizes(new_sizes)
                    print(f"DEBUG: Close section (delayed) - Final sizes: {self.main_splitter.sizes()}")
        
        # Delay ƒë·ªÉ ƒë·∫£m b·∫£o widget ƒë√£ b·ªã x√≥a ho√†n to√†n
        QTimer.singleShot(50, restore_sizes)  # TƒÉng delay l√™n 50ms
        
        # Gi·∫£m k√≠ch th∆∞·ªõc window
        if section_width > 0:
            current_width = self.width()
            new_width = current_width - section_width
            self.resize(new_width, self.height())
        
        # C·∫≠p nh·∫≠t minimum size sau khi x√≥a section
        self._update_window_minimum_size()
        
        self.log_message(f"ƒê√£ ƒë√≥ng section: {section_widget.section_name}")

if __name__ == "__main__":
    # Kh·ªüi t·∫°o ·ª©ng d·ª•ng
    app = QApplication(sys.argv)

    # Thi·∫øt l·∫≠p bi·ªÉu t∆∞·ª£ng ·ª©ng d·ª•ng

    functions.setup_application_icon(app)

    # T·∫°o v√† hi·ªÉn th·ªã c·ª≠a s·ªï ch√≠nh
    window = NotebookRunner()
    
    # --- CƒÉn gi·ªØa v√† di chuy·ªÉn l·ªách c·ª≠a s·ªï khi kh·ªüi ƒë·ªông ---
    try:
        screen = app.primaryScreen()
        if screen:
            screen_geometry = screen.availableGeometry()
            window_geometry = window.frameGeometry()
            # CƒÉn gi·ªØa tr∆∞·ªõc
            window_geometry.moveCenter(screen_geometry.center())
            # Sau ƒë√≥ di chuy·ªÉn l·ªách
            final_x = window_geometry.topLeft().x() - 500
            final_y = window_geometry.topLeft().y() - 50
            window.move(final_x, final_y)
    except Exception as e:
        # In ra l·ªói n·∫øu c√≥ v·∫•n ƒë·ªÅ, nh∆∞ng kh√¥ng l√†m d·ª´ng ch∆∞∆°ng tr√¨nh
        print(f"L·ªói khi ƒë·ªãnh v·ªã c·ª≠a s·ªï: {e}")

    window.show()

    # Ch·∫°y v√≤ng l·∫∑p s·ª± ki·ªán
    sys.exit(app.exec())
