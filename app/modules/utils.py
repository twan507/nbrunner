"""
Module ti·ªán √≠ch - utils.py
Ch·ª©a c√°c h√†m ti·ªán √≠ch ƒë·ªÉ h·ªó tr·ª£ x·ª≠ l√Ω file, th·ªùi gian v√† b√°o c√°o
"""

import os
import json
from datetime import datetime, timedelta
import pandas as pd


def create_directory_if_not_exists(directory_path):
    """
    T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i

    Args:
        directory_path (str): ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c

    Returns:
        bool: True n·∫øu th√†nh c√¥ng
    """
    try:
        if not os.path.exists(directory_path):
            os.makedirs(directory_path)
            print(f"üìÅ ƒê√£ t·∫°o th∆∞ m·ª•c: {directory_path}")
        else:
            print(f"üìÅ Th∆∞ m·ª•c ƒë√£ t·ªìn t·∫°i: {directory_path}")
        return True
    except Exception as e:
        print(f"‚ùå L·ªói khi t·∫°o th∆∞ m·ª•c: {e}")
        return False


def get_file_info(file_path):
    """
    L·∫•y th√¥ng tin chi ti·∫øt c·ªßa file

    Args:
        file_path (str): ƒê∆∞·ªùng d·∫´n file

    Returns:
        dict: Th√¥ng tin file
    """
    try:
        if not os.path.exists(file_path):
            return {"error": "File kh√¥ng t·ªìn t·∫°i"}

        stat = os.stat(file_path)
        info = {
            "file_name": os.path.basename(file_path),
            "file_size_bytes": stat.st_size,
            "file_size_mb": round(stat.st_size / (1024 * 1024), 2),
            "created_time": datetime.fromtimestamp(stat.st_ctime).strftime("%Y-%m-%d %H:%M:%S"),
            "modified_time": datetime.fromtimestamp(stat.st_mtime).strftime("%Y-%m-%d %H:%M:%S"),
            "file_extension": os.path.splitext(file_path)[1],
            "absolute_path": os.path.abspath(file_path),
        }
        return info

    except Exception as e:
        return {"error": f"L·ªói khi l·∫•y th√¥ng tin file: {e}"}


def generate_timestamp_filename(base_name, extension=".xlsx"):
    """
    T·∫°o t√™n file v·ªõi timestamp

    Args:
        base_name (str): T√™n file g·ªëc
        extension (str): Ph·∫ßn m·ªü r·ªông file

    Returns:
        str: T√™n file v·ªõi timestamp
    """
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    return f"{base_name}_{timestamp}{extension}"


def create_summary_report(data_dict, output_path):
    """
    T·∫°o b√°o c√°o t·ªïng h·ª£p t·ª´ dictionary

    Args:
        data_dict (dict): D·ªØ li·ªáu ƒë·ªÉ t·∫°o b√°o c√°o
        output_path (str): ƒê∆∞·ªùng d·∫´n file output

    Returns:
        bool: True n·∫øu th√†nh c√¥ng
    """
    try:
        # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i
        os.makedirs(os.path.dirname(output_path), exist_ok=True)

        # X√°c ƒë·ªãnh lo·∫°i file t·ª´ extension
        file_extension = os.path.splitext(output_path)[1].lower()

        if file_extension == ".txt":
            # T·∫°o b√°o c√°o text
            report_content = "B√ÅO C√ÅO T·ªîNG H·ª¢P\n"
            report_content += f"Th·ªùi gian t·∫°o: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
            report_content += "=" * 50 + "\n\n"

            def format_dict_to_text(d, indent=0):
                text = ""
                for key, value in d.items():
                    if isinstance(value, dict):
                        text += "  " * indent + f"{key}:\n"
                        text += format_dict_to_text(value, indent + 1)
                    else:
                        text += "  " * indent + f"{key}: {value}\n"
                return text

            report_content += format_dict_to_text(data_dict)

            with open(output_path, "w", encoding="utf-8") as f:
                f.write(report_content)

        elif file_extension in [".xlsx", ".xls"]:
            # T·∫°o DataFrame t·ª´ dictionary cho Excel
            report_data = []

            def flatten_dict(d, parent_key="", sep="_"):
                items = []
                for k, v in d.items():
                    new_key = f"{parent_key}{sep}{k}" if parent_key else k
                    if isinstance(v, dict):
                        items.extend(flatten_dict(v, new_key, sep=sep).items())
                    else:
                        items.append((new_key, v))
                return dict(items)

            flat_data = flatten_dict(data_dict)

            for key, value in flat_data.items():
                report_data.append({"M·ª•c": key, "Gi√° tr·ªã": str(value), "Th·ªùi gian t·∫°o": datetime.now().strftime("%Y-%m-%d %H:%M:%S")})

            df = pd.DataFrame(report_data)
            df.to_excel(output_path, index=False)

        elif file_extension == ".csv":
            # T·∫°o DataFrame t·ª´ dictionary cho CSV
            report_data = []

            def flatten_dict(d, parent_key="", sep="_"):
                items = []
                for k, v in d.items():
                    new_key = f"{parent_key}{sep}{k}" if parent_key else k
                    if isinstance(v, dict):
                        items.extend(flatten_dict(v, new_key, sep=sep).items())
                    else:
                        items.append((new_key, v))
                return dict(items)

            flat_data = flatten_dict(data_dict)

            for key, value in flat_data.items():
                report_data.append({"M·ª•c": key, "Gi√° tr·ªã": str(value), "Th·ªùi gian t·∫°o": datetime.now().strftime("%Y-%m-%d %H:%M:%S")})

            df = pd.DataFrame(report_data)
            df.to_csv(output_path, index=False, encoding="utf-8")

        else:
            # M·∫∑c ƒë·ªãnh: l∆∞u d∆∞·ªõi d·∫°ng text cho c√°c ƒë·ªãnh d·∫°ng kh√°c
            report_content = "B√ÅO C√ÅO T·ªîNG H·ª¢P\n"
            report_content += f"Th·ªùi gian t·∫°o: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n"
            report_content += "=" * 50 + "\n\n"

            def format_dict_to_text(d, indent=0):
                text = ""
                for key, value in d.items():
                    if isinstance(value, dict):
                        text += "  " * indent + f"{key}:\n"
                        text += format_dict_to_text(value, indent + 1)
                    else:
                        text += "  " * indent + f"{key}: {value}\n"
                return text

            report_content += format_dict_to_text(data_dict)

            with open(output_path, "w", encoding="utf-8") as f:
                f.write(report_content)

        print(f"üìä ƒê√£ t·∫°o b√°o c√°o t·∫°i: {output_path}")
        return True

    except Exception as e:
        print(f"‚ùå L·ªói khi t·∫°o b√°o c√°o: {e}")
        return False


def save_json_report(data, output_path):
    """
    L∆∞u d·ªØ li·ªáu d∆∞·ªõi d·∫°ng JSON

    Args:
        data: D·ªØ li·ªáu c·∫ßn l∆∞u
        output_path (str): ƒê∆∞·ªùng d·∫´n file JSON

    Returns:
        bool: True n·∫øu th√†nh c√¥ng
    """
    try:
        with open(output_path, "w", encoding="utf-8") as f:
            json.dump(data, f, ensure_ascii=False, indent=2, default=str)
        print(f"üíæ ƒê√£ l∆∞u JSON t·∫°i: {output_path}")
        return True
    except Exception as e:
        print(f"‚ùå L·ªói khi l∆∞u JSON: {e}")
        return False


def calculate_date_range(start_date_str, days_ahead=30):
    """
    T√≠nh to√°n kho·∫£ng th·ªùi gian

    Args:
        start_date_str (str): Ng√†y b·∫Øt ƒë·∫ßu (YYYY-MM-DD)
        days_ahead (int): S·ªë ng√†y t√≠nh t·ª´ ng√†y b·∫Øt ƒë·∫ßu

    Returns:
        dict: Th√¥ng tin kho·∫£ng th·ªùi gian
    """
    try:
        start_date = datetime.strptime(start_date_str, "%Y-%m-%d")
        end_date = start_date + timedelta(days=days_ahead)

        return {
            "start_date": start_date.strftime("%Y-%m-%d"),
            "end_date": end_date.strftime("%Y-%m-%d"),
            "total_days": days_ahead,
            "weekdays": sum(1 for i in range(days_ahead) if (start_date + timedelta(days=i)).weekday() < 5),
            "weekends": sum(1 for i in range(days_ahead) if (start_date + timedelta(days=i)).weekday() >= 5),
        }
    except Exception as e:
        return {"error": f"L·ªói khi t√≠nh to√°n ng√†y: {e}"}


def print_processing_status(step_name, total_steps=None, current_step=None):
    """
    In tr·∫°ng th√°i x·ª≠ l√Ω

    Args:
        step_name (str): T√™n b∆∞·ªõc hi·ªán t·∫°i
        total_steps (int): T·ªïng s·ªë b∆∞·ªõc
        current_step (int): B∆∞·ªõc hi·ªán t·∫°i
    """
    timestamp = datetime.now().strftime("%H:%M:%S")

    if total_steps and current_step:
        progress = f"[{current_step}/{total_steps}]"
        print(f"üîÑ {timestamp} {progress} {step_name}")
    else:
        print(f"üîÑ {timestamp} {step_name}")


def list_files_in_directory(directory_path, extension=None):
    """
    Li·ªát k√™ c√°c file trong th∆∞ m·ª•c

    Args:
        directory_path (str): ƒê∆∞·ªùng d·∫´n th∆∞ m·ª•c
        extension (str): Ph·∫ßn m·ªü r·ªông file c·∫ßn l·ªçc (vd: '.xlsx')

    Returns:
        list: Danh s√°ch file
    """
    try:
        if not os.path.exists(directory_path):
            return []

        files = os.listdir(directory_path)

        if extension:
            files = [f for f in files if f.endswith(extension)]

        file_paths = [os.path.join(directory_path, f) for f in files]
        print(f"üìÇ T√¨m th·∫•y {len(file_paths)} file trong {directory_path}")

        return file_paths

    except Exception as e:
        print(f"‚ùå L·ªói khi li·ªát k√™ file: {e}")
        return []
